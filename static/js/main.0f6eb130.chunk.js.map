{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/coins/coins.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","customer","id","username","email","website","CardList","customers","map","Coins","React","Component","App","changeToCustomers","state","displayCoins","setState","displayCustomers","changeToCoins","fetch","then","response","json","users","console","log","this","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,OAAOC,IAAG,wCAAmCH,EAAMI,SAASC,GAAK,MAE1E,mCAAML,EAAMI,SAASE,SAArB,OACA,kCAAKN,EAAMI,SAASG,MAApB,OACA,iDAAoBP,EAAMI,SAASI,eCJ1BC,G,MAAW,SAAAT,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACKD,EAAMU,UAAUC,KAAI,SAAAP,GAAQ,OAC3B,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,WCEbO,G,kKALb,WACE,OAAO,oBAAIX,UAAU,kBAAd,uB,GAHSY,IAAMC,YC4DXC,G,wDAxDb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAoBRgB,kBAAoB,WACf,EAAKC,MAAMC,cACZ,EAAKC,SAAS,CACZC,kBAAkB,EAClBF,cAAc,KAzBD,EA8BnBG,cAAgB,WACX,EAAKJ,MAAMG,kBACZ,EAAKD,SAAS,CACZC,kBAAkB,EAClBF,cAAc,KA/BlB,EAAKD,MAAQ,CACXP,UAAW,GACXU,kBAAkB,EAClBF,cAAc,GANC,E,qDAYnB,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAET,UAAWgB,OAC1CC,QAAQC,IAAIC,KAAKZ,MAAMG,kBACvBO,QAAQC,IAAIC,KAAKZ,MAAMC,gB,oBAsBzB,WACE,OACE,sBAAKjB,UAAU,MAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,wBAAQA,UAAU,aAAa6B,QAASD,KAAKb,kBAA7C,yBACA,wBAAQf,UAAU,aAAa6B,QAASD,KAAKR,cAA7C,wBAEDQ,KAAKZ,MAAMG,iBACV,cAAC,EAAD,CAAUV,UAAWmB,KAAKZ,MAAMP,YAEhC,cAAC,EAAD,W,GAlDQI,cCKHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0f6eb130.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card-styles.css';\n\nexport const Card = (props) => (\n  <div className='card-container'>\n    <img alt=\"user\" src={`https://i.pravatar.cc/200?img=${props.customer.id + 10}`} /> \n    {/* Added a +10 at the end as there were some children amongst the first pictures */}\n    <h2> {props.customer.username} </h2>\n    <p> {props.customer.email} </p>\n    <p> Favorite coin: {props.customer.website}</p>\n  </div>\n)","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n  <div className='card-list'>\n      {props.customers.map(customer => ( \n        <Card key={customer.id} customer={customer}/>\n      ))}\n  </div>\n)","import React from 'react';\n\nimport './coins.styles.css';\n\nclass Coins extends React.Component {\n\n  render() {\n    return <h1 className=\"coins-container\">COINS</h1>\n  }\n}\n\nexport default Coins;\n\n","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport Coins from './components/coins/coins.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      customers: [],\n      displayCustomers: true,\n      displayCoins: false,\n    };\n  }\n\n  // As I don't know anything about Django REST Framework I used this API to get fake customer information\n  // The pictures are taken from another API in the card component\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ customers: users }));\n    console.log(this.state.displayCustomers);\n    console.log(this.state.displayCoins);\n  }\n\n  //logic to change display in container App\n  changeToCustomers = () => {\n    if(this.state.displayCoins) {\n      this.setState({\n        displayCustomers: true,\n        displayCoins: false,\n      });\n    }\n  }\n\n  changeToCoins = () => {\n    if(this.state.displayCustomers) {\n      this.setState({\n        displayCustomers: false,\n        displayCoins: true,\n      });\n    }\n  }\n\n  render() {\n    return(\n      <div className='App'>\n        <div className=\"tab-container\">\n          <button className=\"tab-button\" onClick={this.changeToCustomers}> CUSTOMERS </button>\n          <button className=\"tab-button\" onClick={this.changeToCoins}> COINS </button>\n        </div>\n        {this.state.displayCustomers ? (\n          <CardList customers={this.state.customers} />\n        ) : (\n          <Coins />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}